/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is not neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/*!*****************************!*\
  !*** ./demo/gmailScript.js ***!
  \*****************************/
eval("// Client ID and API key from the Developer Console\r\nvar CLIENT_ID = \"354191623029-inuaug8o7ca6f909t37miohr1hpcf9gu.apps.googleusercontent.com\";\r\nvar API_KEY = \"AIzaSyD4cUbyfOPegLeDAU-TJym-7DwFQrrEOEw\";\r\n\r\n// Array of API discovery doc URLs for APIs used by the quickstart\r\nvar DISCOVERY_DOCS = [\"https://www.googleapis.com/discovery/v1/apis/gmail/v1/rest\"];\r\n\r\n// Authorization scopes required by the API; multiple scopes can be\r\n// included, separated by spaces.\r\nvar SCOPES = \"https://www.googleapis.com/auth/gmail.modify\";\r\n\r\nvar authorizeButton = document.getElementById(\"signInButton\");\r\nvar signOutButton = document.getElementById(\"signOut_button\");\r\n\r\n/**\r\n *  On load, called to load the auth2 library and API client library.\r\n */\r\nfunction handleClientLoad() {\r\n  gapi.load(\"client:auth2\", initClient);\r\n}\r\n\r\n/**\r\n *  Initializes the API client library and sets up sign-in state\r\n *  listeners.\r\n */\r\nfunction initClient() {\r\n  gapi.client.init({\r\n      apiKey: API_KEY,\r\n      clientId: CLIENT_ID,\r\n      discoveryDocs: DISCOVERY_DOCS,\r\n      scope: SCOPES,\r\n    })\r\n    .then(\r\n      function () {\r\n        // Listen for sign-in state changes.\r\n        gapi.auth2.getAuthInstance().isSignedIn.listen(updateSignInStatus);\r\n\r\n        // Handle the initial sign-in state.\r\n        updateSignInStatus(gapi.auth2.getAuthInstance().isSignedIn.get());\r\n        authorizeButton.onclick = handleAuthClick;\r\n        signOutButton.onclick = handleSignOutClick;\r\n      },\r\n      function (error) {\r\n        appendPre(JSON.stringify(error, null, 2));\r\n      }\r\n    );\r\n}\r\n\r\n/**\r\n *  Called when the signed in status changes, to update the UI\r\n *  appropriately. After a sign-in, the API is called.\r\n */\r\nfunction updateSignInStatus(isSignedIn) {\r\n  if (isSignedIn) {\r\n    authorizeButton.classList.add('hidden');\r\n    signOutButton.classList.remove('hidden');\r\n    document.getElementById(\"homeContainer\").classList.remove('hidden');\r\n    document.getElementById('signInContainer').classList.add('hidden');\r\n    document.getElementById('navBar').classList.remove('hidden');\r\n    showPrimaryEmails();\r\n   // listLabels();\r\n   // listMessages('github');\r\n  } else {\r\n    document.getElementById('signInContainer').classList.remove('hidden');\r\n    document.getElementById('navBar').classList.add('hidden');\r\n    authorizeButton.classList.remove('hidden');\r\n    signOutButton.classList.add('hidden');\r\n    document.getElementById(\"homeContainer\").classList.add('hidden');\r\n  }\r\n}\r\n\r\n/**\r\n *  Sign in the user upon button click.\r\n */\r\nfunction handleAuthClick(event) {\r\n  gapi.auth2.getAuthInstance().signIn();\r\n}\r\n\r\n/**\r\n *  Sign out the user upon button click.\r\n */\r\nfunction handleSignOutClick(event) {\r\n  gapi.auth2.getAuthInstance().signOut();\r\n}\r\n\r\n/**\r\n * Append a pre element to the body containing the given message\r\n * as its text node. Used to display the results of the API call.\r\n *\r\n * @param {string} message Text to be placed in pre element.\r\n */\r\nfunction appendPre(message) {\r\n  var pre = document.getElementById(\"content\");\r\n  var textContent = document.createTextNode(message + \"\\n\");\r\n  pre.appendChild(textContent);\r\n}\r\n\r\n/**\r\n * Print all Labels in the authorized user's inbox. If no labels\r\n * are found an appropriate message is printed.\r\n */\r\nfunction listLabels() {\r\n  gapi.client.gmail.users.labels\r\n    .list({userId: \"me\"})\r\n    .then(function (response) {\r\n      //console.log('labels',response);\r\n      var labels = response.result.labels;\r\n      appendPre(\"Labels:\");\r\n\r\n      if (labels && labels.length > 0) {\r\n        for (i = 0; i < labels.length; i++) {\r\n          var label = labels[i];\r\n          appendPre(`${label.name}: ${label.id}`);\r\n        }\r\n      } else {\r\n        appendPre(\"No Labels found.\");\r\n      }\r\n    });\r\n}\r\n\r\nfunction listMessages(query) {\r\n  gapi.client.gmail.users.messages\r\n    .list({\r\n      userId: \"me\",\r\n      q: query, \r\n    })\r\n    .then(function (response) {\r\n      console.log('messages', response);\r\n      // var labels = response.result.labels;\r\n      // appendPre(\"Labels:\");\r\n\r\n      // if (labels && labels.length > 0) {\r\n      //   for (i = 0; i < labels.length; i++) {\r\n      //     var label = labels[i];\r\n      //     appendPre(`${label.name}: ${label.id}`);\r\n      //   }\r\n      // } else {\r\n      //   appendPre(\"No Labels found.\");\r\n      // }\r\n    });\r\n}\r\n\r\nfunction fetchProfile(){\r\n  gapi.client.request('https://gmail.googleapis.com/gmail/v1/users/me/profile')\r\n    .then(function(userProfileData){\r\n      //console.log('Profile ', userProfileData);\r\n      showUserProfileData(userProfileData);\r\n    }).catch(err => console.error('Error while loading Profile',err));\r\n}\r\n\r\nfunction showUserProfileData(userProfileData){\r\n  console.log('UserProfileData', JSON.parse(userProfileData.body).emailAddress);\r\n}\r\n\r\nasync function fetchIndividualEmails(messageId){\r\n  try{\r\n    const emailData = await gapi.client.request(`https://gmail.googleapis.com/gmail/v1/users/me/messages/${messageId}`);\r\n    return emailData;\r\n  }catch(err){\r\n    console.error('error while fetching individual email', email);\r\n  }\r\n}\r\n\r\nasync function fetchAllMessages(category){\r\n  document.getElementById('emailsLoading').classList.remove('hidden');\r\n  try{\r\n    const userEmailsData = await gapi.client.request(`https://gmail.googleapis.com/gmail/v1/users/me/messages?labelIds=${category}`);\r\n    //console.log('Emails ', userEmailsData);\r\n    processIndividualEmailsData(userEmailsData, category);\r\n  }catch(err){\r\n    console.error('Error while loading Emails',err)\r\n  }\r\n}\r\n\r\nasync function fetchIndividualDrafts(draftId){\r\n  try{\r\n    const draftData = await gapi.client.request(`https://gmail.googleapis.com/gmail/v1/users/me/drafts/${draftId}`);\r\n    return draftData;\r\n  }catch(err){\r\n    console.error('error while fetching individual draft',draft);\r\n  }\r\n}\r\n\r\nasync function fetchAllDrafts(){\r\n  document.getElementById('emailsLoading').classList.remove('hidden');\r\n  try{\r\n    const userDraftsData = await gapi.client.request(`https://gmail.googleapis.com/gmail/v1/users/me/drafts`);\r\n    //console.log('Drafts ', userDraftsData);\r\n    processIndividualDraftsData(userDraftsData, 'DRAFTS');\r\n  }catch(err){\r\n    console.error('Error while loading Drafts',err)\r\n  }\r\n}\r\n\r\nasync function processIndividualDraftsData(userDraftsData, category){\r\n  //console.log(userDraftsData);\r\n  userDraftsArray  = JSON.parse(userDraftsData.body);\r\n  const draftsInfoArray = [];\r\n  Promise.all(\r\n    userDraftsArray.drafts.map( async (draft) => {\r\n      const draftInfo = await fetchIndividualDrafts(draft.id);\r\n      draftsInfoArray.push(draftInfo)\r\n    })\r\n  ).then(() => {\r\n    generateDraftsHtml(draftsInfoArray, category);\r\n  }).catch(err => console.error('err', err));\r\n}\r\n\r\nfunction generateDraftsHtml(draftsInfoArray, category){\r\n  document.getElementById('emailsLoading').classList.add('hidden');\r\n  //console.log('generateDraftsHtml', draftsInfoArray);\r\n  let emailTab = 'draftsTab';\r\n  document.getElementById(emailTab).innerHTML = '';\r\n  const draftsTable =  document.createElement('div');\r\n  draftsTable.classList.add('container');\r\n  draftsTable.setAttribute('id', `${emailTab}Table`);\r\n  draftsProcessedData = [];\r\n\r\n  draftsInfoArray.map(draft => {\r\n    const draftProcessedData = {};\r\n    const isStarred = draft.result.message.labelIds.includes('STARRED');\r\n    const payloadHeaders = draft.result.message.payload.headers;\r\n    payloadHeaders.map(header => {\r\n      if(header.name === 'Date'){\r\n        draftProcessedData.date = header.value;\r\n      } else if (header.name === 'Subject'){\r\n        draftProcessedData.subject = header.value || '(no subject)';\r\n      } else if (header.name === 'From'){\r\n        draftProcessedData.from = 'Draft';\r\n      }\r\n    })\r\n    draftsProcessedData.push(draftProcessedData);\r\n    const tableRow = document.createElement('div');\r\n    tableRow.classList.add('row','draftsCustomRow');\r\n    if(isStarred){\r\n      tableRow.classList.add('starred');\r\n    } else {\r\n      tableRow.classList.add('unStarred');\r\n    }\r\n    tableRow.innerHTML = `\r\n                  <div class=\"col-1\">\r\n                    <input type=\"checkbox\" aria-label=\"Checkbox\">\r\n                  </div>\r\n                  <div class=\"col-1\"><i class=\"material-icons\">star_border</i></div>\r\n                  <div class=\"col-4 text-truncate text-danger\">${draftProcessedData.from}</div>\r\n                  <div class=\"col-4 text-truncate\">${draftProcessedData.subject}</div>\r\n                  <div class=\"col-2 text-truncate\">${formatDate(draftProcessedData.date)}</div>\r\n                `;\r\n    draftsTable.append(tableRow);\r\n  })\r\n  document.getElementById(emailTab).append(draftsTable);\r\n}\r\n\r\nfunction formatDate(date){\r\n\r\n  const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\r\n  \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\r\n];\r\n\r\n// document.write(\"The current month is \" + monthNames[d.getMonth()]);\r\n  const dateString = date.substring(0,25);\r\n  const mailDate = new Date(dateString);\r\n  // console.log(temp.getDate())\r\n  // console.log(temp.getDay())\r\n  // console.log(temp.getFullYear())\r\n  // console.log(monthNames[temp.getMonth()])\r\n  let temp = `${mailDate.getDate()} ${monthNames[mailDate.getMonth()].substring(0,3)} ${mailDate.getFullYear()}`\r\n  //console.log('Date ',temp, mailDate.getDate());\r\n  return temp; \r\n  \r\n}\r\n\r\nasync function processIndividualEmailsData(userEmailsData, category){\r\n  userEmailsArray  = JSON.parse(userEmailsData.body);\r\n  const emailsInfoArray = [];\r\n  Promise.all(\r\n    userEmailsArray.messages.map( async (email) => {\r\n      const emailInfo = await fetchIndividualEmails(email.id);\r\n      emailsInfoArray.push(emailInfo)\r\n    })\r\n  ).then(() => {\r\n    document.getElementById('emailsLoading').classList.add('hidden');\r\n    generateEmailsHtml(emailsInfoArray, category);\r\n  }).catch(err => console.error('err', err));\r\n}\r\n\r\nfunction sortEmailsByDate(emailsInfoArray){\r\n  return emailsInfoArray.sort((email1, email2) => {\r\n    return new Date(email2.date) - new Date(email1.date);\r\n  })\r\n}\r\n\r\nfunction processEmailsInfoArray(emailsInfoArray, category){\r\n  const emailsProcessedData = [];\r\n  emailsInfoArray.filter(email => {\r\n    if(category === 'INBOX'){\r\n      if(email.result.labelIds.includes('INBOX') && (email.result.labelIds.includes('CATEGORY_PROMOTIONS'))){\r\n        return false;\r\n      } else if(email.result.labelIds.includes('INBOX') && email.result.labelIds.includes('SENT')){\r\n        return true;\r\n      } else if(!email.result.labelIds.includes('INBOX') && email.result.labelIds.includes('SENT')){\r\n        return false;\r\n      }\r\n    }\r\n    \r\n    return true;\r\n  }).map((email) => {\r\n    \r\n    const emailProcessedData = {};\r\n    emailProcessedData.messageId = email.result.id;\r\n    emailProcessedData.labelIds = email.result.labelIds;\r\n    emailProcessedData.isUnRead = email.result.labelIds.includes('UNREAD');\r\n    emailProcessedData.isStarred = email.result.labelIds.includes('STARRED');\r\n    const payloadHeaders = email.result.payload.headers;\r\n    payloadHeaders.map(header => {\r\n      if(header.name === 'Date'){\r\n        emailProcessedData.date = header.value;\r\n      } else if (header.name === 'Subject'){\r\n        emailProcessedData.subject = header.value;\r\n      } else if (header.name === 'From'){\r\n        emailProcessedData.from = header.value;\r\n      }\r\n    })\r\n    emailsProcessedData.push(emailProcessedData);\r\n  })\r\n  return sortEmailsByDate(emailsProcessedData);\r\n}\r\n\r\nfunction showIndividualEmail(messageId){\r\n  console.log('id', messageId);\r\n}\r\n\r\nfunction generateEmailsHtml(emailsInfoArray, category){\r\n  const sortedEmailsInfoArray = processEmailsInfoArray(emailsInfoArray, category);\r\n  let emailTab = 'primaryTab';\r\n  if(category === 'INBOX'){\r\n    document.getElementById('emailsTabList').classList.remove('hidden');\r\n  } else if(category === 'CATEGORY_SOCIAL'){\r\n    document.getElementById('emailsTabList').classList.remove('hidden');\r\n    emailTab = 'socialTab';\r\n  } else if(category === 'CATEGORY_PROMOTIONS'){\r\n    document.getElementById('emailsTabList').classList.remove('hidden');\r\n    emailTab = 'promotionsTab';\r\n  } else if(category === 'SENT'){\r\n    emailTab = 'sentMailsTab';\r\n  } else if(category === 'STARRED'){\r\n    emailTab = 'starredTab';\r\n  } else if(category === 'IMPORTANT'){\r\n    emailTab = 'importantTab';\r\n  } else if(category === 'STARRED'){\r\n    emailTab = 'starredTab';\r\n  } \r\n  \r\n  const emailsTable =  document.createElement('div');\r\n  emailsTable.classList.add('container');\r\n  emailsTable.setAttribute('id', `${emailTab}Table`);\r\n  emailsProcessedData = [];\r\n  sortedEmailsInfoArray.map(email => {\r\n    const tableRow = document.createElement('div');\r\n    tableRow.classList.add('row','emailsCustomRow');\r\n    \r\n    tableRow.setAttribute(\"onclick\",`showIndividualEmail('${email.messageId}')`);\r\n    if(!email.isUnRead){\r\n      tableRow.classList.add('emailRead');\r\n    }\r\n    if(email.isStarred){\r\n      tableRow.classList.add('starred');\r\n    } else {\r\n      tableRow.classList.add('unStarred');\r\n    }\r\n    tableRow.innerHTML = `\r\n                  <div class=\"col-1\">\r\n                    <input type=\"checkbox\" aria-label=\"Checkbox\">\r\n                  </div>\r\n                  <div class=\"col-1\"><i class=\"material-icons\">star_border</i></div>\r\n                  <div class=\"col-4 text-truncate\">${email.from}</div>\r\n                  <div class=\"col-4 text-truncate\">${email.subject}</div>\r\n                  <div class=\"col-2 text-truncate\">${formatDate(email.date)}</div>\r\n                `;\r\n    emailsTable.append(tableRow);\r\n  })\r\n  document.getElementById(emailTab).append(emailsTable);\r\n}\r\n\r\nlet previousTab = '';\r\nlet previousButton = 'homeButton';\r\n\r\nfunction showPrimaryEmails(){\r\n  if(previousTab !== ''){\r\n    document.getElementById(previousTab).innerHTML = '';\r\n    document.getElementById(previousTab).classList.add('hidden');\r\n  }\r\n  if(previousButton !== ''){\r\n    document.getElementById(previousButton).classList.remove('active');\r\n  }\r\n  document.getElementById('primaryTab').classList.remove('hidden');\r\n  document.getElementById('homeButton').classList.add('active');\r\n  fetchAllMessages('INBOX');\r\n  previousTab = 'primaryTab';\r\n  previousButton = 'homeButton';\r\n}\r\n\r\nfunction showSocialEmails(){\r\n  if(previousTab !== ''){\r\n    document.getElementById(previousTab).innerHTML = '';\r\n    document.getElementById(previousTab).classList.add('hidden');\r\n  }\r\n  document.getElementById('socialTab').classList.remove('hidden');\r\n  fetchAllMessages('CATEGORY_SOCIAL');\r\n  previousTab = 'socialTab';\r\n}\r\n\r\nfunction showPromotionsEmails(){\r\n  if(previousTab !== ''){\r\n    document.getElementById(previousTab).innerHTML = '';\r\n    document.getElementById(previousTab).classList.add('hidden');\r\n  }\r\n  document.getElementById('promotionsTab').classList.remove('hidden');\r\n  document.getElementById(previousTab).innerHTML = '';\r\n  fetchAllMessages('CATEGORY_PROMOTIONS');\r\n  previousTab = 'promotionsTab';\r\n}\r\n\r\nfunction showStarred(){\r\n  if(previousTab !== ''){\r\n    document.getElementById(previousTab).innerHTML = '';\r\n    document.getElementById(previousTab).classList.add('hidden');\r\n  }\r\n  if(previousButton !== ''){\r\n    document.getElementById(previousButton).classList.remove('active');\r\n  }\r\n  document.getElementById('starredTab').classList.remove('hidden');\r\n  document.getElementById('starredButton').classList.add('active');\r\n  fetchAllMessages('STARRED');\r\n  previousTab = 'starredTab';\r\n  previousButton = 'starredButton';\r\n}\r\n\r\nfunction showImportantMails(){\r\n  if(previousTab !== ''){\r\n    document.getElementById(previousTab).innerHTML = '';\r\n    document.getElementById(previousTab).classList.add('hidden');\r\n  }\r\n  if(previousButton !== ''){\r\n    document.getElementById(previousButton).classList.remove('active');\r\n  }\r\n  document.getElementById('importantTab').classList.remove('hidden');\r\n  document.getElementById('importantButton').classList.add('active');\r\n  fetchAllMessages('IMPORTANT');\r\n  previousTab = 'importantTab';\r\n  previousButton = 'importantButton';\r\n}\r\n\r\nfunction showSentMails(){\r\n  if(previousTab !== ''){\r\n    document.getElementById(previousTab).innerHTML = '';\r\n    document.getElementById(previousTab).classList.add('hidden');\r\n  }\r\n  if(previousButton !== ''){\r\n    document.getElementById(previousButton).classList.remove('active');\r\n  }\r\n  document.getElementById('sentMailsTab').classList.remove('hidden');\r\n  document.getElementById('sentMailsButton').classList.add('active');\r\n  fetchAllMessages('SENT');\r\n  previousTab = 'sentMailsTab';\r\n  previousButton = 'sentMailsButton';\r\n}\r\n\r\nfunction showDrafts(){\r\n  if(previousTab !== ''){\r\n    document.getElementById(previousTab).innerHTML = '';\r\n    document.getElementById(previousTab).classList.add('hidden');\r\n  }\r\n  if(previousButton !== ''){\r\n    document.getElementById(previousButton).classList.remove('active');\r\n  }\r\n  document.getElementById('draftsTab').classList.remove('hidden');\r\n  document.getElementById('draftsButton').classList.add('active');\r\n  fetchAllDrafts();\r\n  previousTab = 'draftsTab';\r\n  previousButton = 'draftsButton';\r\n}\r\n\r\nfunction refreshCurrentTab(){\r\n  switch(previousTab) {\r\n    case 'primaryTab':\r\n      document.getElementById('primary-tab').click();    \r\n      break;\r\n    case 'socialTab':\r\n      document.getElementById('social-tab').click();    \r\n      break;\r\n    case 'promotionsTab':\r\n      document.getElementById('promotions-tab').click();    \r\n      break;\r\n    case 'starredTab':\r\n      document.getElementById('starred-tab').click();    \r\n      break;\r\n    case 'importantTab':\r\n      document.getElementById('important-tab').click();    \r\n      break;    \r\n    case 'sentMailsTab':\r\n      document.getElementById('sentMails-tab').click();    \r\n      break;    \r\n    case 'draftsTab':\r\n      document.getElementById('drafts-tab').click();    \r\n      break;    \r\n    default:\r\n      document.getElementById('primary-tab').click();    \r\n      break;\r\n  }\r\n}\r\n\r\nfunction clickPrimaryTab(){\r\n  document.getElementById('primary-tab').click();\r\n}\r\n\r\nfunction clickStarredTab(){\r\n  document.getElementById('starred-tab').click();\r\n}\r\n\r\nfunction clickImportantMailsTab(){\r\n  document.getElementById('important-tab').click();\r\n}\r\n\r\nfunction clickSentMailsTab(){\r\n  document.getElementById('sentMails-tab').click();\r\n}\r\n\r\nfunction clickDraftsTab(){\r\n  document.getElementById('drafts-tab').click();\r\n}\r\n\r\nfunction cancelSendingEmail(){\r\n\r\n}\r\n\r\nfunction clearEmailErrorMessage(){\r\n  document.getElementById('emailHelp').innerHTML = '';\r\n}\r\n\r\nfunction sendEmail(){\r\n  const toEmail = document.getElementById('toEmailId').value;\r\n  document.getElementById('emailHelp').innerHTML = '';\r\n  if(toEmail === '' ){\r\n    document.getElementById('toEmailId').focus();\r\n    document.getElementById('emailHelp').innerHTML = 'Please specify at least one recipient'\r\n    document.getElementById('emailHelp').style.color = 'red';\r\n    return;\r\n  }\r\n  const ccBccEmailId = document.getElementById('ccBccEmailId').value;\r\n  const emailSubject = document.getElementById('emailSubject').value;\r\n  const emailBody = document.getElementById('emailBody').value;\r\n\r\n  const mimeData = [\r\n    \"From:ravikiran.code@gmail.com\",\r\n    \"To:\"+toEmail,\r\n    \"Subject: =?utf-8?B?\" + window.btoa(unescape(encodeURIComponent(emailSubject))) + \"?=\",\r\n    \"MIME-Version: 1.0\",\r\n    \"Content-Type: text/plain; charset=UTF-8\",\r\n    \"Content-Transfer-Encoding: 7bit\",\r\n    \"\",\r\n    \"\"+ emailBody].join(\"\\n\").trim();\r\n  const raw = window.btoa(unescape(encodeURIComponent(mimeData))).replace(/\\+/g, '-').replace(/\\//g, '_');\r\n\r\n  //console.log(raw);\r\n  //console.log('sendEmail');\r\n\r\n  gapi.client.gmail.users.messages.send({\r\n    'userId': 'me',\r\n    'resource': {\r\n      'raw': raw\r\n    }\r\n  }).execute(res => {\r\n    console.log('Email sent', res);\r\n    //this.snackBar.success('Email has send Successfully')\r\n  });\r\n\r\n\r\n  $('#sendEmailModal').modal('hide')\r\n}\r\n\r\n$('#sendEmailModal').on('hidden.bs.modal', function (e) {\r\n  console.log('modal closed');\r\n})\n\n//# sourceURL=webpack://gmail-clone/./demo/gmailScript.js?");
/******/ })()
;